
    /* eslint-disable @typescript-eslint/no-var-requires, no-empty */
    /*
    THIS FILE IS AUTOMATICALLY GENERATED.
    DO NOT EDIT.
    */

    
        let PortalSender
        try {
          PortalSender = require('../artifacts/contracts/deployment/PortalSender.sol/PortalSender.json')
        } catch {}
        

        let SystemDictator
        try {
          SystemDictator = require('../artifacts/contracts/deployment/SystemDictator.sol/SystemDictator.json')
        } catch {}
        

        let EchidnaFuzzAddressAliasing
        try {
          EchidnaFuzzAddressAliasing = require('../artifacts/contracts/echidna/FuzzAddressAliasing.sol/EchidnaFuzzAddressAliasing.json')
        } catch {}
        

        let EchidnaFuzzBurnEth
        try {
          EchidnaFuzzBurnEth = require('../artifacts/contracts/echidna/FuzzBurn.sol/EchidnaFuzzBurnEth.json')
        } catch {}
        

        let EchidnaFuzzBurnGas
        try {
          EchidnaFuzzBurnGas = require('../artifacts/contracts/echidna/FuzzBurn.sol/EchidnaFuzzBurnGas.json')
        } catch {}
        

        let EchidnaFuzzEncoding
        try {
          EchidnaFuzzEncoding = require('../artifacts/contracts/echidna/FuzzEncoding.sol/EchidnaFuzzEncoding.json')
        } catch {}
        

        let EchidnaFuzzHashing
        try {
          EchidnaFuzzHashing = require('../artifacts/contracts/echidna/FuzzHashing.sol/EchidnaFuzzHashing.json')
        } catch {}
        

        let EchidnaFuzzOptimismPortal
        try {
          EchidnaFuzzOptimismPortal = require('../artifacts/contracts/echidna/FuzzOptimismPortal.sol/EchidnaFuzzOptimismPortal.json')
        } catch {}
        

        let EchidnaFuzzResourceMetering
        try {
          EchidnaFuzzResourceMetering = require('../artifacts/contracts/echidna/FuzzResourceMetering.sol/EchidnaFuzzResourceMetering.json')
        } catch {}
        

        let GovernanceToken
        try {
          GovernanceToken = require('../artifacts/contracts/governance/GovernanceToken.sol/GovernanceToken.json')
        } catch {}
        

        let MintManager
        try {
          MintManager = require('../artifacts/contracts/governance/MintManager.sol/MintManager.json')
        } catch {}
        

        let L1CrossDomainMessenger
        try {
          L1CrossDomainMessenger = require('../artifacts/contracts/L1/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json')
        } catch {}
        

        let L1ERC721Bridge
        try {
          L1ERC721Bridge = require('../artifacts/contracts/L1/L1ERC721Bridge.sol/L1ERC721Bridge.json')
        } catch {}
        

        let L1StandardBridge
        try {
          L1StandardBridge = require('../artifacts/contracts/L1/L1StandardBridge.sol/L1StandardBridge.json')
        } catch {}
        

        let L2OutputOracle
        try {
          L2OutputOracle = require('../artifacts/contracts/L1/L2OutputOracle.sol/L2OutputOracle.json')
        } catch {}
        

        let OptimismPortal
        try {
          OptimismPortal = require('../artifacts/contracts/L1/OptimismPortal.sol/OptimismPortal.json')
        } catch {}
        

        let ResourceMetering
        try {
          ResourceMetering = require('../artifacts/contracts/L1/ResourceMetering.sol/ResourceMetering.json')
        } catch {}
        

        let StakingFee
        try {
          StakingFee = require('../artifacts/contracts/L1/StakingFee.sol/StakingFee.json')
        } catch {}
        

        let SystemConfig
        try {
          SystemConfig = require('../artifacts/contracts/L1/SystemConfig.sol/SystemConfig.json')
        } catch {}
        

        let CrossDomainOwnable
        try {
          CrossDomainOwnable = require('../artifacts/contracts/L2/CrossDomainOwnable.sol/CrossDomainOwnable.json')
        } catch {}
        

        let CrossDomainOwnable2
        try {
          CrossDomainOwnable2 = require('../artifacts/contracts/L2/CrossDomainOwnable2.sol/CrossDomainOwnable2.json')
        } catch {}
        

        let CrossDomainOwnable3
        try {
          CrossDomainOwnable3 = require('../artifacts/contracts/L2/CrossDomainOwnable3.sol/CrossDomainOwnable3.json')
        } catch {}
        

        let GasPriceOracle
        try {
          GasPriceOracle = require('../artifacts/contracts/L2/GasPriceOracle.sol/GasPriceOracle.json')
        } catch {}
        

        let L1Block
        try {
          L1Block = require('../artifacts/contracts/L2/L1Block.sol/L1Block.json')
        } catch {}
        

        let L2CrossDomainMessenger
        try {
          L2CrossDomainMessenger = require('../artifacts/contracts/L2/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json')
        } catch {}
        

        let L2ERC721Bridge
        try {
          L2ERC721Bridge = require('../artifacts/contracts/L2/L2ERC721Bridge.sol/L2ERC721Bridge.json')
        } catch {}
        

        let L2StandardBridge
        try {
          L2StandardBridge = require('../artifacts/contracts/L2/L2StandardBridge.sol/L2StandardBridge.json')
        } catch {}
        

        let L2ToL1MessagePasser
        try {
          L2ToL1MessagePasser = require('../artifacts/contracts/L2/L2ToL1MessagePasser.sol/L2ToL1MessagePasser.json')
        } catch {}
        

        let AddressManager
        try {
          AddressManager = require('../artifacts/contracts/legacy/AddressManager.sol/AddressManager.json')
        } catch {}
        

        let L1BlockNumber
        try {
          L1BlockNumber = require('../artifacts/contracts/legacy/L1BlockNumber.sol/L1BlockNumber.json')
        } catch {}
        

        let IL1ChugSplashDeployer
        try {
          IL1ChugSplashDeployer = require('../artifacts/contracts/legacy/L1ChugSplashProxy.sol/IL1ChugSplashDeployer.json')
        } catch {}
        

        let L1ChugSplashProxy
        try {
          L1ChugSplashProxy = require('../artifacts/contracts/legacy/L1ChugSplashProxy.sol/L1ChugSplashProxy.json')
        } catch {}
        

        let LegacyERC20ETH
        try {
          LegacyERC20ETH = require('../artifacts/contracts/legacy/LegacyERC20ETH.sol/LegacyERC20ETH.json')
        } catch {}
        

        let LegacyMessagePasser
        try {
          LegacyMessagePasser = require('../artifacts/contracts/legacy/LegacyMessagePasser.sol/LegacyMessagePasser.json')
        } catch {}
        

        let LegacyMintableERC20
        try {
          LegacyMintableERC20 = require('../artifacts/contracts/legacy/LegacyMintableERC20.sol/LegacyMintableERC20.json')
        } catch {}
        

        let ResolvedDelegateProxy
        try {
          ResolvedDelegateProxy = require('../artifacts/contracts/legacy/ResolvedDelegateProxy.sol/ResolvedDelegateProxy.json')
        } catch {}
        

        let Arithmetic
        try {
          Arithmetic = require('../artifacts/contracts/libraries/Arithmetic.sol/Arithmetic.json')
        } catch {}
        

        let Burn
        try {
          Burn = require('../artifacts/contracts/libraries/Burn.sol/Burn.json')
        } catch {}
        

        let Burner
        try {
          Burner = require('../artifacts/contracts/libraries/Burn.sol/Burner.json')
        } catch {}
        

        let Bytes
        try {
          Bytes = require('../artifacts/contracts/libraries/Bytes.sol/Bytes.json')
        } catch {}
        

        let Constants
        try {
          Constants = require('../artifacts/contracts/libraries/Constants.sol/Constants.json')
        } catch {}
        

        let Encoding
        try {
          Encoding = require('../artifacts/contracts/libraries/Encoding.sol/Encoding.json')
        } catch {}
        

        let Hashing
        try {
          Hashing = require('../artifacts/contracts/libraries/Hashing.sol/Hashing.json')
        } catch {}
        

        let LegacyCrossDomainUtils
        try {
          LegacyCrossDomainUtils = require('../artifacts/contracts/libraries/LegacyCrossDomainUtils.sol/LegacyCrossDomainUtils.json')
        } catch {}
        

        let Predeploys
        try {
          Predeploys = require('../artifacts/contracts/libraries/Predeploys.sol/Predeploys.json')
        } catch {}
        

        let RLPReader
        try {
          RLPReader = require('../artifacts/contracts/libraries/rlp/RLPReader.sol/RLPReader.json')
        } catch {}
        

        let RLPWriter
        try {
          RLPWriter = require('../artifacts/contracts/libraries/rlp/RLPWriter.sol/RLPWriter.json')
        } catch {}
        

        let SafeCall
        try {
          SafeCall = require('../artifacts/contracts/libraries/SafeCall.sol/SafeCall.json')
        } catch {}
        

        let MerkleTrie
        try {
          MerkleTrie = require('../artifacts/contracts/libraries/trie/MerkleTrie.sol/MerkleTrie.json')
        } catch {}
        

        let SecureMerkleTrie
        try {
          SecureMerkleTrie = require('../artifacts/contracts/libraries/trie/SecureMerkleTrie.sol/SecureMerkleTrie.json')
        } catch {}
        

        let Types
        try {
          Types = require('../artifacts/contracts/libraries/Types.sol/Types.json')
        } catch {}
        

        let TransferOnion
        try {
          TransferOnion = require('../artifacts/contracts/periphery/TransferOnion.sol/TransferOnion.json')
        } catch {}
        

        let CrossDomainMessenger
        try {
          CrossDomainMessenger = require('../artifacts/contracts/universal/CrossDomainMessenger.sol/CrossDomainMessenger.json')
        } catch {}
        

        let CrossDomainMessengerLegacySpacer0
        try {
          CrossDomainMessengerLegacySpacer0 = require('../artifacts/contracts/universal/CrossDomainMessenger.sol/CrossDomainMessengerLegacySpacer0.json')
        } catch {}
        

        let CrossDomainMessengerLegacySpacer1
        try {
          CrossDomainMessengerLegacySpacer1 = require('../artifacts/contracts/universal/CrossDomainMessenger.sol/CrossDomainMessengerLegacySpacer1.json')
        } catch {}
        

        let ERC721Bridge
        try {
          ERC721Bridge = require('../artifacts/contracts/universal/ERC721Bridge.sol/ERC721Bridge.json')
        } catch {}
        

        let ILegacyMintableERC20
        try {
          ILegacyMintableERC20 = require('../artifacts/contracts/universal/IOptimismMintableERC20.sol/ILegacyMintableERC20.json')
        } catch {}
        

        let IOptimismMintableERC20
        try {
          IOptimismMintableERC20 = require('../artifacts/contracts/universal/IOptimismMintableERC20.sol/IOptimismMintableERC20.json')
        } catch {}
        

        let IOptimismMintableERC721
        try {
          IOptimismMintableERC721 = require('../artifacts/contracts/universal/IOptimismMintableERC721.sol/IOptimismMintableERC721.json')
        } catch {}
        

        let OptimismMintableERC20
        try {
          OptimismMintableERC20 = require('../artifacts/contracts/universal/OptimismMintableERC20.sol/OptimismMintableERC20.json')
        } catch {}
        

        let OptimismMintableERC20Factory
        try {
          OptimismMintableERC20Factory = require('../artifacts/contracts/universal/OptimismMintableERC20Factory.sol/OptimismMintableERC20Factory.json')
        } catch {}
        

        let OptimismMintableERC721
        try {
          OptimismMintableERC721 = require('../artifacts/contracts/universal/OptimismMintableERC721.sol/OptimismMintableERC721.json')
        } catch {}
        

        let OptimismMintableERC721Factory
        try {
          OptimismMintableERC721Factory = require('../artifacts/contracts/universal/OptimismMintableERC721Factory.sol/OptimismMintableERC721Factory.json')
        } catch {}
        

        let Proxy
        try {
          Proxy = require('../artifacts/contracts/universal/Proxy.sol/Proxy.json')
        } catch {}
        

        let IStaticERC1967Proxy
        try {
          IStaticERC1967Proxy = require('../artifacts/contracts/universal/ProxyAdmin.sol/IStaticERC1967Proxy.json')
        } catch {}
        

        let IStaticL1ChugSplashProxy
        try {
          IStaticL1ChugSplashProxy = require('../artifacts/contracts/universal/ProxyAdmin.sol/IStaticL1ChugSplashProxy.json')
        } catch {}
        

        let ProxyAdmin
        try {
          ProxyAdmin = require('../artifacts/contracts/universal/ProxyAdmin.sol/ProxyAdmin.json')
        } catch {}
        

        let Semver
        try {
          Semver = require('../artifacts/contracts/universal/Semver.sol/Semver.json')
        } catch {}
        

        let StandardBridge
        try {
          StandardBridge = require('../artifacts/contracts/universal/StandardBridge.sol/StandardBridge.json')
        } catch {}
        

        let AddressAliasHelper
        try {
          AddressAliasHelper = require('../artifacts/contracts/vendor/AddressAliasHelper.sol/AddressAliasHelper.json')
        } catch {}
        

        let WETH9
        try {
          WETH9 = require('../artifacts/contracts/vendor/WETH9.sol/WETH9.json')
        } catch {}
        

    export const getContractArtifact = (name: string): any => {
      return {
        PortalSender,
SystemDictator,
EchidnaFuzzAddressAliasing,
EchidnaFuzzBurnEth,
EchidnaFuzzBurnGas,
EchidnaFuzzEncoding,
EchidnaFuzzHashing,
EchidnaFuzzOptimismPortal,
EchidnaFuzzResourceMetering,
GovernanceToken,
MintManager,
L1CrossDomainMessenger,
L1ERC721Bridge,
L1StandardBridge,
L2OutputOracle,
OptimismPortal,
ResourceMetering,
StakingFee,
SystemConfig,
CrossDomainOwnable,
CrossDomainOwnable2,
CrossDomainOwnable3,
GasPriceOracle,
L1Block,
L2CrossDomainMessenger,
L2ERC721Bridge,
L2StandardBridge,
L2ToL1MessagePasser,
AddressManager,
L1BlockNumber,
IL1ChugSplashDeployer,
L1ChugSplashProxy,
LegacyERC20ETH,
LegacyMessagePasser,
LegacyMintableERC20,
ResolvedDelegateProxy,
Arithmetic,
Burn,
Burner,
Bytes,
Constants,
Encoding,
Hashing,
LegacyCrossDomainUtils,
Predeploys,
RLPReader,
RLPWriter,
SafeCall,
MerkleTrie,
SecureMerkleTrie,
Types,
TransferOnion,
CrossDomainMessenger,
CrossDomainMessengerLegacySpacer0,
CrossDomainMessengerLegacySpacer1,
ERC721Bridge,
ILegacyMintableERC20,
IOptimismMintableERC20,
IOptimismMintableERC721,
OptimismMintableERC20,
OptimismMintableERC20Factory,
OptimismMintableERC721,
OptimismMintableERC721Factory,
Proxy,
IStaticERC1967Proxy,
IStaticL1ChugSplashProxy,
ProxyAdmin,
Semver,
StandardBridge,
AddressAliasHelper,
WETH9
      }[name]
    }
    